#!/usr/bin/env bash
#
# Arquivo: magico
# Descrição: Um helper para baixar, atualizar e instalar pacotes do AUR (https://aur.archlinux.org)
#
# Feito por Arch Linux BR Dev Team (https://github.com/archlinux-br-dev)
# Site do Projeto: https://archlinux-br-dev.github.io/magico
# Repositório: https://github.com/archlinux-br-dev/magico
#
# Criado em:        31/05/2018 19:39:27
# Última alteração: 24/01/2019 15:40:27
# Versão 0.2b

### PROGRAMA EM FASE EXPERIMENTAL!!! ###

command -v jq >/dev/null 2>&1 || { echo >&2 "O aplicativo jq não está instalado. Abortando."; exit 1; }
command -v jshon >/dev/null 2>&1 || { echo >&2 "O aplicativo jshon não está instalado. Abortando."; exit 1; }

antigo="$(pwd)"
caminho="$HOME/.cache/magico"
aur="https://aur.archlinux.org"

[ ! -d $caminho ] && mkdir -p $caminho
cd $caminho


# Cores
rst='\033[0m'
vermelho='\033[00;31m'
verde='\033[00;32m'
amarelo='\033[00;33m'
azul='\033[00;34m'
magenta='\033[00;35m'
roxo='\033[00;35m'
ciano='\033[00;36m'
cinza='\033[00;37m'
vermelhoc='\033[01;31m'
verdec='\033[01;32m'
amareloc='\033[01;33m'
azulc='\033[01;34m'
magentac='\033[01;35m'
roxoc='\033[01;35m'
cianoc='\033[01;36m'
branco='\033[01;37m'

versao() {

IFS='' read -r -d '' logo <<'EOF'
                       _           
 _ __ ___   __ _  __ _(_) ___ ___  
| '_ ` _ \ / _` |/ _` | |/ __/ _ \ 
| | | | | | (_| | (_| | | (_| (_) |
|_| |_| |_|\__,_|\__, |_|\___\___/ 
                 |___/             

EOF

  echo -e "\033[00;35m$logo\033[0m"
  echo -e "Um AUR helper para o Arch Linux."
  echo -e "Versão: 0.2b"

}

ajuda() {
  echo -e "\nUso: $(basename $0) $roxo-Syu$rst"
  echo -e "Atualiza todos os pacotes.\n"
  echo -e "     $(basename $0) $roxo-Ss$rst pacote"
  echo -e "Pesquisa um pacote no AUR.\n"
  echo -e "     $(basename $0) $roxo-S$rst  pacote"
  echo -e "Instala um pacote do AUR.\n"
  echo -e "     $(basename $0) $roxo-Sw$rst pacote"
  echo -e "Baixa um pacote do AUR.\n"  
  echo -e "     $(basename $0) $roxo-v$rst"
  echo -e "Mostra a versão do programa.\n"    
  echo -e "     $(basename $0) $roxo-h$rst"
  echo -e "Exibe esta ajuda.\n"  
}

baixar() {
  local pacotes
  local depends
  pacotes=$(pacman -Sl)

  for arg in "$@"; do
    depends=$(curl -sg "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$arg")
    
    if [[ $(echo -e "$depends" | jshon -e results) != "[]" ]]; then
      git clone https://aur.archlinux.org/"$arg".git 2> /dev/null
      echo -e ":: $arg baixado em $caminho/$arg"
    
      if [[ $(echo -e "$depends" | jshon -e results -e 0 -e Depends) != "[]" ]]; then
        depends=$(echo -e "$depends" | jshon -e results -e 0 -e Depends -a -u)

        for dep in $depends; do
          echo -e "$pacotes" | grep "$dep" > /dev/null
    
          if [[ "$?" == 1 ]]; then
            baixar "$dep"
          fi
    
        done

      fi
    
    fi
  done

}

atualizar() {
  n=0
  local pacotes
  declare -a pct

  pacotes=$(pacman -Qqm)
  [ ! "$pacotes" ] && echo -e ":: Nenhum pacote do AUR instalado.\n" && exit 0

  cd $caminho

  for p in $pacotes; do
    vlocal="$(pacman -Q $p | awk '{print $2}')"
    vremota="$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg=${p}" | jq -r '.results[0].Version')"
    maior="$(echo -e "$vlocal\n$vremota" | sort -V | tail -n1)"
    lrel=$(echo "$vlocal" | awk -F- '{print $NF}')
    vrel=$(echo "$vremota" | awk -F- '{print $NF}')

    if [ "$vremota" != null ]; then
      if [ "$vlocal" != "$vremota" ] && [ "$maior" != "$vlocal" ] || [ "$vrel" -gt "$lrel" ]; then
        pct+="$p $vlocal $vremota"
        let n++
      fi
    fi
  done

  if [ "$n" != "0" ]; then
    for e in "${!pct[@]}"; do
      pa=$(echo ${pct[$e]} | awk '{print $1}')
      old=$(echo ${pct[$e]} | awk '{print $2}')
      new=$(echo ${pct[$e]} | awk '{print $3}')
      echo -e ":: [$roxo${e}$rst] $amarelo$pa$rst -> $vermelho$old$rst -> $azul$new$rst\n"
    done
    echo -e ":: Existem $n atualizações disponíveis.\n"
    read -n1 -p ":: Deseja atualizar? [s/N]: " at

    if [ "$at" == "[sS]" ]; then
      for e in "${!pct[@]}"; do
        instalar ${pct[$e]}
      done
    fi

  else
    echo -e ":: Todos os pacotes estão atualizados.\n" 
  fi
}

pesquisar() {
  n=0
  for p in "$@"; do
    echo 
    echo -e ":: Pesquisando $vermelho$p$rst no AUR..."
    total=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$p" | jq '.results | length')

    if [ $total ]; then
      while [[ $n < $total ]]; do
        nome=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&arg=${p}" | jq -r ".results[$n].Name")
        versao=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&arg=${p}" | jq -r ".results[$n].Version")
        echo -e ":: [$roxo$n$rst] ${azul}aur$rst/$amarelo$nome $vermelho$versao$rst"
        let n++
      done
    else
      echo -e ":: Nenhum pacote com o nome $vermelho$p$rst encontrado.\n"
      echo
    fi

  done
  echo
  echo -e ":: Número de resultados: $total\n"
}

instalar() {
  local p
  instalados="$(pacman -Q)"

  for p in "$@"; do
    
    if pacman -Ssq "^${p}$" > /dev/null; then
      echo "O pacote $p existe nos repositórios oficiais."
    else

      if [[ $instalados =~ (^|[[:space:]])$p($|[[:space:]]) ]]; then
        echo "O pacote $p já está instalado."
      else
        url="${aur}/cgit/aur.git/snapshot/${p}.tar.gz"
        if curl --output /dev/null --silent --head --fail "$url"; then
          curl -s -O "$url"
          tar xzf "${p}.tar.gz"
          cd $p
          echo "\n${roxoc}:: Instalando ${vermelhoc}{p}${roxoc}...${rst}"
          sleep 3
          makepkg -si --noconfirm 1> /dev/null 2> /dev/null          
          cd ..
        else
          if pacman -Ssq $p > /dev/null; then
            echo "${roxoc}:: O pacote ${vermelhoc}$p${roxoc} existe nos repositórios oficiais.${rst}"
          else
            echo "${roxoc}::O pacote ${vermelhoc}$p${roxoc} não foi encontrado.${rst}"
          fi
        fi
      fi

    fi
  done
}

if [[ "$1" == "-Sw" ]]; then
  shift
  baixar "$@"
elif [[ "$1" == "-Syu" ]]; then
  atualizar
elif [[ "$1" == "-Ss" ]]; then
  shift
  pesquisar "$@"
elif [[ "$1" == "-S" ]]; then
  shift
  instalar "$@"
elif [[ "$1" == "-v" ]] || [[ "$1" == "--version" ]]; then
  shift
  versao
else
  ajuda
fi

cd $antigo
exit